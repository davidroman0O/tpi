name: Build TPI CLI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build CLI
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux builds
          - os: linux
            arch: amd64
          - os: linux
            arch: 386
          - os: linux
            arch: arm64
          - os: linux
            arch: arm
            arm: 7
          
          # macOS builds
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          
          # Windows builds
          - os: windows
            arch: amd64
          - os: windows
            arch: 386
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          check-latest: true
      
      - name: Set binary name
        id: binary-name
        run: |
          # Base name for the binary
          BASE_NAME="tpi"
          
          # Add OS and architecture to the name
          FULL_NAME="${BASE_NAME}-${{ matrix.os }}-${{ matrix.arch }}"
          
          # Add ARM version suffix if specified
          if [ "${{ matrix.arm }}" != "" ]; then
            FULL_NAME="${FULL_NAME}v${{ matrix.arm }}"
          fi
          
          # Add .exe extension for Windows
          if [ "${{ matrix.os }}" = "windows" ]; then
            FULL_NAME="${FULL_NAME}.exe"
          fi
          
          echo "BINARY_NAME=${FULL_NAME}" >> $GITHUB_ENV
          
          # Create artifact name (same as binary name)
          echo "ARTIFACT_NAME=${FULL_NAME}" >> $GITHUB_ENV
        shell: bash
      
      - name: Build CLI
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          GOARM: ${{ matrix.arm }}
        run: |
          # Debug information
          echo "Building for $GOOS/$GOARCH as ${{ env.BINARY_NAME }}"
          
          # Move to CLI directory to build
          cd cli
          
          # Debug information about available modules
          go list -m all
          
          # Build the CLI
          go build -o ${{ env.BINARY_NAME }} -v -ldflags="-X 'main.version=$(git describe --tags --always)' -X 'main.commit=$(git rev-parse HEAD)' -X 'main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)'" .
          
          # Verify the binary exists
          ls -la ${{ env.BINARY_NAME }}
        shell: bash
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: cli/${{ env.BINARY_NAME }}
  
  # Create a release when a tag is pushed
  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: List downloaded artifacts
        run: |
          echo "Contents of artifacts directory:"
          find artifacts -type f | sort
      
      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          name: TPI CLI ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}